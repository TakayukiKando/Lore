docinfo{encoding="UTF-8",version="http://xgmtk.org/lore/1.0":url}
desc("シナリオ・サンプル"){"Lore言語のサンプルコード、シナリオの記述例"}
author("椎路 ちひろ"){"Chihiro_Shiiji@xmpp.xgmtk.org":jid, "mail:develop@xgmtk.org":url}
history("2013-07-15T00:00:00+09:00":date){reviser="椎路 ちひろ",desc="作成"}
history("2013-11-05T00:00:00+09:00":date){reviser="椎路 ちひろ",desc="改訂"}
history("2013-12-22T00:00:00+09:00":date){reviser="椎路 ちひろ",desc="改訂"}

// ルール定義のインポート
import "rules.xml":url;

/* シナリオの見本。 */
section scenario{

	/* 初期化イベント。 */
	initial = {
		ticks=0;
		priority=0;
		
		/* 初期化処理。 */
		handler = @{
			rules.initial;
		};
	}:Event;

	/*
	基点となるエリアに「とある地方」を設定。
	この「とある地方」にはたった２つしか地点がない。
	
	ジオメトリはXML形式で表現されます。
	別のXMLファイルを参照することもできますが、ここではヒアドキュメントでXMLを直接書いて文字列としてxml()に渡しています。
	別ファイルを参照する場合は、XML(URL("http://www.xgmtk.org/sample.xml"))のようにしてXML()にURLを渡します。
	
	このエリアのジオメトリはLinkedタイプ、スケールは1[km]を設定しています。
	*/
	region = {
		location = "/[0]":loc;
		description = "とある地域";
		geometry = [=[
<?xml version="1.0" encoding="UTF-8"?>
<geometry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.xgmtk.org/Lore/Linked Linked.xsd"
	xmlns="http://www.xgmtk.org/Linked"
	scale="1[km]">
	<node label="start_point">
		<description>
			<plain>スタート地点</plain>
		</description>
		<link to="dungeon" distance="4"></link>
	</node>
	<node label="dungeon">
		<description>
			<plain>ミニマムダンジョン所在地</plain>
		</description>
		<link to="start_point" distance="4"></link>
	</node>
</geometry>
]=]:xml;
	}:Area;

	/*
	「とある地方」のとある場所（dungeon）に５×５の升目に区切られたダンジョンを設置。
	この例ではジオメトリ・データは別ファイルになっています。
	高さが-5[m]に設定されているので基準高度から地下へ5メートルにあることになります。
	*/
	dungeon = {
		location = "/region[dungeon]":loc;
		geometry = ("dungeon.xml":url).loadXML;
		environment = {
			height = -5[m];
		}:Environment;
	}:Area;

		プレイヤー・キャラクターを「とある地方」の旅立ちの場に配置。
	pc = {
			name="Chihiro";
			player="Chihiro_Shiiji@xmpp.xgmtk.org":jid;
			location="/region[start_point]":loc;
			features=list<Featur>.empty;
			items=list<Item>.empty;
		}:PC;

	/*
	所有者未定の宝箱は「とあるミニマムなダンジョン」の「祭壇」の位置に…。
	secretsのhideに秘密情報が設定されているのでkeyとなる情報を入手していないキャラには見えません。
	*/
	chest = {
		location = "/region/dungeon[1,2]":loc;
		secrets = {
			{
					key = "secret0";
					mode = rules.SecretMode.hide;
			}:Secret
		};
	}:Item;

	/*
	「とある地方」から「とあるミニマムなダンジョン」へエリア間移動のためのトリガ。
	ダンジョンの地点で「探す」をすると次のラウンドにダンジョンに入ります。
	*/
	dungeonEntrance = {
		location="/region[dungeon]":loc;
		actions={Action.search};
		
		/*
		ダンジョンに入るためのイベントのハンドラ
		*/
		handler = @(pc : PC){
			// 指定された時間経過後に移動完了の処理をするためのイベントを登録します。
			pc.futureMove(1[R], "/region/dungeon[1,4]":loc);
			
			// 「移動」完了後に再び予定を尋ねるためにイベント登録。
			pc.futureChoice(1[R]);
		};
	}:Trigger;

	/*
	「とあるミニマムなダンジョン」から「とある地方」からへエリア間移動のためのトリガ。
	ダンジョンの出口の地点で「探す」をすると次のラウンドにダンジョンから「とある地方」に戻ります。
	*/
	dungeonExit = {
		location="/region/dungeon[1,4]":loc;
		actions={Action.search};
		
		/*
		ダンジョンを出るためのイベントのハンドラ
		*/
		handler = @(pc : PC){
			// 指定された時間経過後に移動完了の処理をするためのイベントを登録します。
			pc.futureMove(1[R], "/region[dungeon]":loc);
			
			// 「移動」完了後に再び予定を尋ねるためにイベント登録。
			pc.futureChoice(1[R]);
		};
	}:Trigger;

	/*
	宝箱発見メッセージの表示のためのトリガ。
	祭壇の位置で「探す」をすると発動します。
	*/
	chestFound = {
		location="/region/dungeon[1,2]":loc;
		actions={Action.search};
		
		/*
		宝物発見のトリガのハンドラ。
		秘密情報をキャラへ渡すことでたからばこを見えるようにするとともにメッセージを表示します。
		*/
		handler = @(pc : PC){
			// チェストに設定されている秘密情報をキャラに受け渡す
			pc.addKnownSecret(chest.secrets.hide);
			/*
			ここではhtmlテキストをメッセージとして送ってみました。 
			大きな文字と宝箱のイメージがチャット画面に表示されます。 
			*/
			pc.message([=[
<html>
	<body>
		<p>
			<big>宝物が見つかりました！</big>
			<img src="TresureChest.jpg" alt="（宝箱のイメージ）" />
		</p>
	</body>
</html>
]=]:html);
		};
	}:Trigger;
	
}//Section scenarioの終わり
